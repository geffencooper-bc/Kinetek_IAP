make_minimum_required(VERSION 2.8.3)

set(APP_NAME "kinetek-util")

set(CMAKE_BUILD_TYPE Debug)

# default directory paths
set(CANOPEN_SRC ${CMAKE_CURRENT_SOURCE_DIR}/../modules/CANopenNode)
set(STACKDRV_SRC ${CANOPEN_SRC}/stack/neuberger-socketCAN)
#set(STACKDRV_SRC ${CANOPEN_SRC}/stack/socketCAN)
set(APP_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src)


include_directories(   
                        ${STACKDRV_SRC}
                        ${CANOPEN_SRC}
                        ${APPL_SRC}
                        ${CMAKE_CURRENT_BINARY_DIR}
)

set(SOURCES     ${STACKDRV_SRC}/CO_driver.c         
             #   ${STACKDRV_SRC}/CO_Linux_threads.c    
                ${STACKDRV_SRC}/CO_notify_pipe.c    
            #    ${CANOPEN_SRC}/CANopen.c
                ${APP_SRC}/main.cpp                          
)

# attempt to generate version.h if info changed
add_custom_target(
   gen_version_headers2
   DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/__df_1   # depend on non-existent file to force target to build every time
)

add_custom_command(
    OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/__df_1
    COMMAND python ${PROJECT_SOURCE_DIR}/scripts/version.py
)

# remove stopping compilation due to warnings caused by the auto-generated file OC_OD.c
set_source_files_properties(${OBJ_DICT_SRC}/CO_OD.c PROPERTIES COMPILE_FLAGS -w)

add_executable(${APP_NAME} ${SOURCES})
add_dependencies(${APP_NAME} gen_version_headers2)

target_compile_options(${APP_NAME} PUBLIC "-pthread")

target_link_libraries(${APP_NAME} pthread)

install(TARGETS ${APP_NAME}
    COMPONENT linapp
    RUNTIME DESTINATION ${LOWSHEEN_UTILS_PATH}
    LIBRARY DESTINATION ${LOWSHEEN_UTILS_PATH}
    DESTINATION ${LOWSHEEN_UTILS_PATH}
)







----------------

cmake_minimum_required(VERSION 2.8.3)

# Project Properties

project(lowsheen-utils)

set(LOWSHEEN_UTILS_PATH /usr/local/bin)

set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} "-Wall -Werror")
set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})

# Project Applications
add_subdirectory(vcis-util)
add_subdirectory(kinetek-util)

# Debian Package Definition (using CPack)
SET(CPACK_GENERATOR "DEB")
SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "Lowsheen") #required
INCLUDE(CPack)

# place script to automatically bring up interfaces using /etc/network/interfaces.d
set(LOWSHEEN_UTILS_IFC_SCRIPT "./scripts/${CMAKE_PROJECT_NAME}.socketcan")
install(PROGRAMS ${LOWSHEEN_UTILS_IFC_SCRIPT}
    DESTINATION "/etc/network/interfaces.d/"
)
~                                                                                                       
~                                                                                                       
~                   

-------------
// main file

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <iostream>
#include <string>
#include "CO_driver.h"
using namespace std;

// identifier passed with the callback function
int id = 21;

// callback function passed into buffer init
void call_back(void* msg, const CO_CANrxMsg_t* can_msg)
{
    printf("in call back. Obj: %i\t Id: %i    data[0]:%i\n", (uintptr_t)msg, can_msg->ident, can_msg->data[0]);
}

int main()
{
    // empty objects
    CO_CANmodule_t cm;
    CO_CANrxMsg_t can_msg;

    // lists of transmit and receive buffers
    CO_CANrx_t rxArr[1];
    CO_CANtx_t txArr[1];

    // interface init, make sure to do ip link before this
    unsigned int if_index = if_nametoindex("can0"); // get ifindex from name
    uintptr_t can_interface = if_index;

    cout << "if index: " << can_interface << endl;

    // can module object init
    int err =  CO_CANmodule_init(&cm, (void*)if_index, rxArr, 1, txArr, 1, 250);
    cout << "init module. Error: " << err << " Interface count: " << cm.CANinterfaceCount << " " << endl;
    CO_CANsetNormalMode(&cm);

    // // receive
    // err = CO_CANrxBufferInit(&cm, 0, 0x080, 0x7FF, 0, (void*)id, call_back);
    // cout << "init rx buffer. Error: " << err << endl;
    // printf("error %i\n",CO_CANrxWait(&cm, -1, &can_msg)); 


    // send
    uint8_t data1[8] = {0x1D, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00};
    uint8_t data2[8] = {0x1D, 0xFF, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00};
    printf("init tx buffer\n");
    CO_CANtx_t* tx1 = CO_CANtxBufferInit(&cm, 0, 0x001, 0, 5, false);
    CO_CANtx_t* tx2 = CO_CANtxBufferInit(&cm, 0, 0x001, 0, 5, false);

    printf("Sending Message\n");
    memcpy(tx1->data, data1, 8);
    memcpy(tx2->data, data2, 8);
	int err1 = CO_CANsend(&cm, tx1);
	int err2 = CO_CANsend(&cm, tx2);
	printf("err: %i, %i\n", err1, err2);
}

-----------------------------

// a class to abstract CO_driver and make it easy to send/receive messages

#ifndef SOCKET_CAN_HELPER_H
#define SOCKET_CAN_HELPER_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <iostream>
#include <string>
#include "CO_driver.h"

using std::string;
using std::cout;
using std::endl;

class SocketCanHelper
{
    public:
    SocketCanHelper();

    ~SocketCanHelper();

    int init_socketcan(const char* interface_name); //"can0"
    
    int send_frame(uint32_t can_id, uint8_t* data, uint8_t data_size);

    int get_frame(uint32_t can_id, uint8_t* data, uint8_t data_size);

    void print_frame();

    private:
    CO_CANmodule_t* cm;
    CO_CANtx_t* tx_buff_arr;
    CO_CANrx_t* rx_buff_arr;
};

#endif

------------------------------------
#include "SocketCanHelper.h"

SocketCanHelper::SocketCanHelper()
{

}

SocketCanHelper::~SocketCanHelper()
{
    delete [] tx_buff_arr;
    delete [] rx_buff_arr;
    delete cm;
}

int SocketCanHelper::init_socketcan(const char* interface_name)
{
    // empty objects
    cm = new CO_CANmodule_t;
    // CO_CANrxMsg_t can_msg;

    // lists of transmit and receive buffers
    tx_buff_arr = new CO_CANtx_t[1];
    rx_buff_arr = new CO_CANrx_t[1];
    
    // interface init, make sure to do ip link before this
    unsigned int if_index = if_nametoindex(interface_name); // get ifindex from name
    uintptr_t can_interface = if_index;

    cout << "if index: " << can_interface << endl;

    // can module object init
    int err =  CO_CANmodule_init(cm, (void*)if_index, rx_buff_arr, 1, tx_buff_arr, 1, 250);
    cout << "init module. Error: " << err << " Interface count: " << cm->CANinterfaceCount << " " << endl;
    CO_CANsetNormalMode(cm);
}

int SocketCanHelper::send_frame(uint32_t can_id, uint8_t* data, uint8_t data_size)
{
    //printf("init tx buffer\n");
    CO_CANtx_t* tx1 = CO_CANtxBufferInit(cm, 0, can_id, 0, data_size, false);

    printf("Sending Message\n");
    memcpy(tx1->data, data, data_size);
	int err1 = CO_CANsend(cm, tx1);
	printf("err: %i", err1);
}
----------------------------
// main file

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <iostream>
#include <string>
#include "CO_driver.h"
#include "SocketCanHelper.h"
using namespace std;

// identifier passed with the callback function
int id = 21;

// callback function passed into buffer init
void call_back(void* msg, const CO_CANrxMsg_t* can_msg)
{
    printf("in call back. Obj: %i\t Id: %i    data[0]:%i\n", (uintptr_t)msg, can_msg->ident, can_msg->data[0]);
}

int main()
{
    SocketCanHelper sc;
    sc.init_socketcan("can0");
    /*====================================
    // empty objects
    CO_CANmodule_t cm;
    CO_CANrxMsg_t can_msg;

    // lists of transmit and receive buffers
    CO_CANrx_t rxArr[1];
    CO_CANtx_t txArr[1];

    // interface init, make sure to do ip link before this
    unsigned int if_index = if_nametoindex("can0"); // get ifindex from name
    uintptr_t can_interface = if_index;

    cout << "if index: " << can_interface << endl;

    // can module object init
    int err =  CO_CANmodule_init(&cm, (void*)if_index, rxArr, 1, txArr, 1, 250);
    cout << "init module. Error: " << err << " Interface count: " << cm.CANinterfaceCount << " " << endl;
    CO_CANsetNormalMode(&cm);

    // // receive
    // err = CO_CANrxBufferInit(&cm, 0, 0x080, 0x7FF, 0, (void*)id, call_back);
    // cout << "init rx buffer. Error: " << err << endl;
    // printf("error %i\n",CO_CANrxWait(&cm, -1, &can_msg)); 


    // send
    uint8_t data1[8] = {0x1D, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00};
    uint8_t data2[8] = {0x1D, 0xFF, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00};
    printf("init tx buffer\n");
    CO_CANtx_t* tx1 = CO_CANtxBufferInit(&cm, 0, 0x001, 0, 5, false);
    CO_CANtx_t* tx2 = CO_CANtxBufferInit(&cm, 0, 0x001, 0, 5, false);

    printf("Sending Message\n");
    memcpy(tx1->data, data1, 8);
    memcpy(tx2->data, data2, 8);
	int err1 = CO_CANsend(&cm, tx1);
	int err2 = CO_CANsend(&cm, tx2);
	printf("err: %i, %i\n", err1, err2);
    ===========================================*/
}

