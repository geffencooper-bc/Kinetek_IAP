import re
import csv
import shutil

IAP_data_lookup = [

    ('10 10 10 10 10 10 10 10' , "\treceived 32 bytes"),
    ('88 88 88 88 88 88 88 88' , "\tstart sending bytes request"),
    ('99 99 99 99 99 99 99 99' , "\tready to receive bytes response"),
    ('[0-9A-F][0-9A-F] [0-9A-F][0-9A-F] 5E|5F [0-9A-F][0-9A-F] [0-9A-F][0-9A-F] 00 00 00' , "\treceive reply of version request command"),
    ('02 [0-9A-F][0-9A-F] [0-9A-F][0-9A-F] [0-9A-F][0-9A-F] [0-9A-F][0-9A-F] 9A 00 00' , "\tsend code start address"),
    ('02 10 10 10 10 10 10 10' , "\treceive reply of code start address"),
    ('03 [0-9A-F][0-9A-F] [0-9A-F][0-9A-F] [0-9A-F][0-9A-F] [0-9A-F][0-9A-F] 9B 00 00' , "\tsend code checksum data"),
    ('03 10 10 10 10 10 10 10' , "\treceive reply of code checksum"),
    ('04 [0-9A-F][0-9A-F] [0-9A-F][0-9A-F] [0-9A-F][0-9A-F] [0-9A-F][0-9A-F] 9C 00 00' , "\tsend code data size"),
    ('04 10 10 10 10 10 10 10' , "\treceive reply of code checksum data"),
    ('05 10 00 00 00 90 00 00' , "\tsend end of hex file message"),
    ('05 20 20 20 20 20 20 20' , "\tcalculated checksum successfully"),
]  


#print(switch_IAP_data('01 08 5E 00 80 00 00 00'))
#print(switch_IAP_data('11 22 5E 00 80 00 00 00'))

def lookup(data, table):
    for pattern, value in table:
        if re.search(pattern, data):
            return value
    return None



def appendCSV(csvFile, textFile):
    #copy csv file instead of overwrite
    shutil.copy2(csvFile, "out.csv")

    with open(csvFile, 'r') as read_obj, open('out.csv', 'w', newline='') as write_obj, open(textFile, 'r') as txtFile:
        csvReader = csv.reader(read_obj)
        csvWriter = csv.writer(write_obj)

        for row in csvReader:
            row.append((txtFile.readline()).strip('\n'))
            row.append("")
            row.append("")
            row.append("")
            row.append("")
            row.append("")
            csvWriter.writerow(row)

            
#print(lookup('F3 08 5E 00 80 00 00 00', IAP_data_lookup))
# stri = "a a a a a"
# stri = stri.replace(" ", "-")
# print(stri)

#appendCSV('/home/geffen.cooper/vm_shared/can_logs/SC2.27-2.28_full.csv', 'translated_output/out.txt')

#expected = open("hex_file_copies/2.27_copy.hex", "r")
#actual = open(actual_file, "r")

# extract raw from expected
# data = expected.read()
# data_list = data.splitlines()
# raw_hex = ""
# for item in data_list:
#     if item[:3] == ":10":
#         item = item[9:]
#         item = item[:-2]
#         raw_hex += item
# expected_raw = open("hex_file_copies/2.27_copy_raw.txt", "w")
# expected_raw.write(raw_hex)

# write_ids = [0x04F, 0x050, 0x051, 0x052]

# i = 0
# while i in range(len(write_ids)):
#     print(write_ids[i])
#     i += 1
#     if i == len(write_ids):
#         i = 0
#         print('\n')

# calculates the checksum of a page
def calc_checksum(line):
    bytes_list = [line[i:i+2] for i in range(0, len(line), 2)]
    print(bytes_list)
    print(len(bytes_list))
    bytes_list_num = [int(i, 16) for i in bytes_list]
    return sum(bytes_list_num)

print(hex(calc_checksum("70100020018100082912010871ED0008190F01083DC80008EDAF010800000000000000000000000000000000898C01083FD50008000000008D2A0108899701081B8100081B8100081B8100081B8100081B8100081B8100081B8100081B8100081B8100081B8100081B8100081B8100081B8100081B8100081B8100081B8100081B8100081B810008C58800081B8100081B8100081B8100081B8100081B8100081B8100081B8100081B8100081B810008E19701081B8100081B8100081B8100081B8100081B8100081B8100081B8100081B8100081B810008CDA901081B8100081B8100081B8100081B810008DFF80CD000F0A8FB004800477DB60108701000200648804706480047FEE7FEE7FEE7FEE7FEE7FEE7FEE7FEE7FEE7FEE78D970108ED800008F0B480EA0102D20F4300B3EB410F02D20346084619464B0042D0C30DDDB2C1F3C7542C1B202C35DAC1F3160141F4000502B16D42C4F1200605FA06F125412844B3EBD05F23D0C2B1012CA0EBC35009DCF0BC4FF0004202EAC35200F50000DBB200F0CEBA400000F1807000EBC350A0F1807040EAD170490009E0490841EAC071A0EBC35000F50000400800EBC350F0BC00F0ADBA5142012303EB4101801AF6E7F0BC704781F00041AAE780F00040A7E780EA010210B502F00042400026D04B0023D04FEA106101EB1361C0F35600C3F3560340F4000043F40003A0FB0330A1F17F014FEA00401C0401D000F1010050EA134001D44000491EC3B20C0604EBD010401C4008802B02D003E0002010BD20F00100002900DA0020104310BD80EA010202F0004330B430F0004221F0004015D0A0B1C0F3C755C2F3C754C2F31601C0F31600651B41F4000140F400007D35814201D36D1C00E04900002D02DA30BC002070474FF400020024814201D3091A144352084FEA4101F7D151B1814202D14FF0004105E002D24FF0010101E06FF0010104EBC55030BC184400F029BA2DE9FE4F074681EA0300C00F0E46019021F0004123F00044B81AA14105D23846314617461E460B46024623F00040104304D13846314603B0BDE8F08F350DC5F30A00C3F30A510290401A0090402867DAC3F3130040F4801B0198924620B10023D2EB030A63EB0B0B00985946C0F14002504600F0BDF980460C4650465946009A00F0D5F9C0197141EF1785EA11533B433FD0019A4AB3009A012A11DC0022801A61EB05514FF0004303EA0555CDE90025801841F580114246234600F00FFABAE72E050025401B61EB0601401941F58012001852412818A6F5001343EB020140EAD47018EB0808644113E064084FEA38084FF0000244EAC0744FEA0553801A61EB0301801841F5801149084FEA3000801859414246234603B0BDE8F04F00F0D1B90198012240000023D0EB020263EBE07301984FEAE074381A66EB0401EBE783F000435DE781F000415AE72DE9FE4F81EA030421F0004504F0004423F000414FF0000A009450EA050302D052EA010304D10020014603B0BDE8F08FC1F30A53C5F30A542344A3F2F3330193A0FB02B3C5F3130545F4801CC1F3130141F480180CFB023300FB083E810A930A41EA8C5143EA8853A1FB03474FEA9C2505FB03734FEA982601FB06373D05260545EA1435BBEB06016EEB0503850E920E45EA8C1542EA8812A5FB0206261E67EB00070C0D44EA0334A61947EB1350C1F313044FF000031946E5FB02014FEA033545EA1455019B4FEA0432009CA3F10C03CDE900A445EA060502932B4600F059F9A3E72DE9F04D81EA030404F0004B21F0004714464FF0000A23F0004150EA070220D054EA01021DD0C1F30A550246C1F31300C7F30A56C7F3130340F4801143F48013A6EB0508101BD64608F2FD3873EB010002D308F1010801E092185B41B8F1000F03DA00200146BDE8F08D00204FF48015064607460EE0B2EB040C73EB010C04D3121B064363EB01032F436D084FEA300092185B4150EA050CEDD152EA030012D082EA040083EA0105284303D100224FF0004308E0101B8B4102D20122002302E06FF0010253101AEB060047EB085110EB0A0041EB0B01BDE8F04D00F0DCB870B521F0004303430CD0C1F30A540026D4EB060566EB0603D417AD1AA34102DB0020014670BD001C41EB025170BD96230022114600F091B80EB5002240F23343CDE9002202931346002100F0C2F803B000BD20F00040C10DC0F3160040F400007F2901DA00207047962903DCC1F19601C840704796398840704770B5C1F30A5201F000450024C1F3130140F2FF3341F480119A4201DA002070BD40F233439A42A2F2334203DC524200F02CF800E090402C43F1D0404270BDC1F30A52C1F3130140F2FF3341F480119A4201DA0020704740F233439A42A2F2334202DC524200F011B890407047202A04DB203A00FA02F1002070479140C2F1200320FA03F3194390407047202A04DB203A21FA02F00021704721FA02F3D040C2F120029140084319467047202A06DBCB17203A41FA02F043EAE07306E041FA02F3D040C2F1200291400843194670470029A8BF7047401C490008BF20F00100704710B4B0FA80FC00FA0CF050EA010404BF10BC704749B1CCF1200421FA04F411FA0CF118BF012121430843A3EB0C01CB1D4FEA00614FEA102048BF0020BCBF10BC704700EBC35010440029A4BF10BC7047401C490008BF20F0010010BC704710B5002B08DA401C41F1000192185B411A4301D120F0010010BD2DE9FF4D934611B1B1FA81F202E0B0FA80F220329246FFF77DFF039A0746884640EA0B0011435B46084304D13846414604B0BDE8F08D114653EA020016D0CAF140025846FFF775FF04460D464FF00106584652460399FFF75DFF084300D10026344345EA")))